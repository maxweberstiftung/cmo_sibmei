{
    PLGTITLE "CMO bracket input helper"
    PLGNAME "cmoBrackets"

    UsulChoices
    UsulChoice
    DlgUsulName
    DlgUsulGroups


    Initialize "() {
        AddToPluginsMenu(PLGTITLE, 'Run');
    }"


    InitGlobals "() {
        Self._property:SymbolDy = 96;
        Self._property:StartSymbolDx = -4;
        Self._property:EndSymbolDx = -4;
        Self._property:StartSymbol = 404;
        Self._property:EndSymbol = 405;
        Self._property:AlignmentGridSize = 128;
    }"


    Run "() {
        InitGlobals();
        score = Sibelius.ActiveScore;
        ShowDialog(score);
    }"


    Dialog_CreateBrackets "() {
        groups = GetUsuls()[UsulChoice];
        parsedGroups = ParseUsulGroupLengths(DlgUsulGroups);
        if (null != parsedGroups._property:error) {
            return Sibelius.MessageBox(parsedGroups.error);
        }
        if (DlgUsulName != UsulChoice or groups != ParseUsulGroupLengths(DlgUsulGroups)) {
            if (not Sibelius.YesNoMessageBox('Modified or newly created usûl groups have not been saved yet. Save now and create brackets?')) {
                return '';
            }
            if (not Dialog_SaveUsul()) {
                return '';
            }
            groups = GetUsuls()[UsulChoice];
        }
        Sibelius.CloseDialog(Dialog, Self, true);
        score = Sibelius.ActiveScore;
        if (SelectionIsEmpty(score.Selection)) {
            selection = score.NthStaff(1);
        } else {
            selection = score.Selection;
        }
        error = CreateBrackets(CollectBars(selection), groups);
        if (null != error) {
            return Sibelius.MessageBox(error & '\n\nProcessing was interrupted.');
        }
    }"


    ///"Sets the selected usul (both in the dropdown and in the text fields) to
    `usul`.  If `usul` is not found int the list of usuls, then the first usul
    of the dropdown menu is chosen."
    /param "usul (string)"
    /param "createNewUsul (boolean)  If `usul` is not already present in the list
    of known usûls, add it to the list of choices (but don't save it yet to the
    list that is saved to the final file)."
    /return "(boolean)  `true` if a new usûl was added to the list of choices."
    RefreshUsulChoices "(usul, createNewUsul) {
        usuls = GetUsuls();
        UsulChoices = CreateArray();
        for each Name usulName in usuls {
            UsulChoices[UsulChoices.NumChildren] = usulName;
        }

        UsulChoice = usul;
        createdNewUsul = false;

        if (null = usuls[usul]) {
            if (createNewUsul) {
                UsulChoices[UsulChoices.NumChildren] = usul;
                DlgUsulGroups = '';
                createdNewUsul = true;
            } else {
                UsulChoice = UsulChoices[0];
            }
        }

        DlgUsulName = UsulChoice;
        if (not createdNewUsul) {
            DlgUsulGroups = usuls[UsulChoice].Join(' ');
        }

        return createdNewUsul;
    }"


    FocusControl "(dialog, controlId) {
        for each control in dialog.Controls {
            // SetControl has the values 0 or 1, so convert to number with '+ 0'
            control.SetFocus = (control.ID = controlId) + 0;
        }
    }"


    ShowDialog "(score) {
        usuls = GetUsuls();
        // Prepare what to display in dialog
        usulText = GetUsulText(score);
        if (null != usulText._property:error) {
            Sibelius.MessageBox(usulText.error);
            usulName = '';
        } else {
            usulName = usulText.usul;
        }
        createdNewUsul = RefreshUsulChoices(usulName, true);
        if (createdNewUsul) {
            Sibelius.MessageBox('No grouping was defined yet for ' & usulName & '. Please input it in the dialog.');
            FocusControl(Dialog, 'IDC_DLGUSULGROUPS_EDIT');
        } else {
            FocusControl(Dialog, 'IDC_USULCHOICES_COMBO');
        }

        return Sibelius.ShowDialog(Dialog, Self);
    }"


    GetUsulFile "() {
        return cmo_sibmei.GetPluginDir(PLGTITLE) & 'usuls.csv';
    }"


    /return "(Dictionary)  Keys are usul names, values are `SparseArray`s with
    the lengths of each group in quarter notes."
    GetUsuls "() {
        if (null != Self._property:Usuls) {
            return Usuls;
        }
        Self._property:Usuls = CreateDictionary();
        usulLines = Sibelius.ReadTextFile(GetUsulFile());
        for each line in usulLines {
            // First column is the usul name, the following columns are the
            // group lengths
            fields = SplitString(line, ',');
            usulName = fields[0];
            groupLengths = CreateSparseArray();
            if (fields.NumChildren < 2) {
                Trace('Malformed line in ' & GetUsulFile() & ':\n' & line);
                // Not returning a Dictionary will crash the plugin, but that's
                // O.K. for now.
                return '';
            }
            for i = 1 to fields.NumChildren {
                groupLengths.Push(fields[i] + 0);
            }
            Usuls[usulName] = groupLengths;
        }
        return Usuls;
    }"


    ///"Searches the Sibelius file for a text item with style `Usûl` and tries
    to extract the usul name."
    /param "score (Score)"
    /return "(SystemTextItem|Error)"
    GetUsulText "(score) {
        for each SystemTextItem text in score.SystemStaff {
            if (text.StyleAsText = 'Usûl') {
                prefix = Substring(text.Text, 0, 6);
                if (prefix != 'Usûl: ') {
                    return CreateDictionary('error', 'Usûl text item is expected start with \'Usûl: \', but it starts with \'' & prefix & '\'');
                }
                text._property:usul = Substring(text.Text, 6);
                return text;
            }
        }
    }"


    ///"Adds (or overwrites) an usûl in the global `Usuls` Dictionary and writes
    the updated data to a persistent file."
    /param "name (string)"
    /param "groups (SparseArray<int>)  Group lengths"
    /return "(string|null)  An error message, if `unparsedGroups` could not be
    parsed or the patterns could not be written to a file. `null` on success."
    SaveUsul "(name, groups) {
        usuls = GetUsuls();
        usuls[name] = groups;
        return WriteUsulsToFile();
    }"


    ///"Deletes usûl settings from the dialog and the persistent file"
    /param "usulToDelete (string)  The usûl name"
    /return "(boolean)  `true` on success"
    DeleteUsul "(usulToDelete) {
        oldUsuls = GetUsuls();
        newUsuls = CreateDictionary();
        for each Name usulName in oldUsuls {
            if (usulName != usulToDelete) {
                newUsuls[usulName] = oldUsuls[usulName];
            }
        }

        if (oldUsuls - newUsuls != 1) {
            Trace('Error deleting usul');
            return false;
        }

        Self._property:Usuls = newUsuls;
        return WriteUsulsToFile();
    }"


    /return "(string|null)  An error message if the file could not be written.
    `null` on success."
    WriteUsulsToFile "() {
        usulFile = GetUsulFile();
        if (not Sibelius.CreateTextFile(usulFile)) {
            return 'Could not reset file ' & usulFile;
        }
        for each Name usul in Usuls {
            csvLine = usul & ',' & Usuls[usul].Join(',');
            if (not Sibelius.AppendLineToFile(usulFile, csvLine)) {
                return 'Could not write to file ' & usulFile;
            }
        }
        return null;
    }"


    ShowHelp "() {
        Sibelius.MessageBox('Not implemented yet');
    }"


    ///"This function can be used to return an error state for functions that
    return objects."
    /param "bar (Bar|null)  `bar` is used to provide information about the
    bar/division.  I `null`, no bar information will be reported."
    /param "groupIndex (int)  The 0-based index of the usûl group to report.  If
    `groupIndex` is negative, no group information will be reported."
    /return "(Dictionary<string>)  A Dictionary with a single key `error` that
    is an error message. The `message` argument is concatenated with information
    about the position the error stems from in the music."
    Error "(message, bar, groupIndex) {
        if (groupIndex >= 0) {
            groupInfo = ', group ' & (groupIndex + 1);
        } else {
            groupInfo = '';
        }
        if (null = bar) {
            barInfo = '';
        } else {
            barInfo = ', bar ' & bar.BarNumber & ' (Division ' & bar.ExternalBarNumberString & ')';
        }
        return CreateDictionary('error', message & barInfo & groupInfo);
    }"


    /param "bar (Bar)"
    /return "SparseArray<SymbolItem>  An array of all start and end brackets.
    An array of the positions of start brackets (rounded to eighth beats) is
    stored under the user property key `startPositions`."
    CollectBrackets "(bar) {
        brackets = CreateSparseArray();
        brackets._property:startPositions = CreateSparseArray();
        for each SymbolItem symbol in bar {
            if (symbol.Index = StartSymbol or symbol.Index = EndSymbol) {
                brackets.Push(symbol);
                if (symbol.Index = StartSymbol) {
                    startPosition = (
                        Round(symbol.Position * 1.0 / AlignmentGridSize) * AlignmentGridSize
                    );
                    brackets.startPositions.Push(startPosition);
                }
            }
        }

        return brackets;
    }"


    /param "score (Score)"
    /param "barNumber (int)"
    /return "(SparseArray<Dictionary<NoteRest>>|Error)  Keys of SparseArray are
    the positions of the NoteRests, from all the staves in the given bar.  Values
    are Dictionary with entries `leftmost` and `rightmost` (leftmost and the
    rightmost NoteRests, based on their `Dx` property).  An error Dictionary is
    returned if NoteRests were found that are not voice 1."
    CollectNoteRestsByPosition "(score, barNumber) {
        noteRestsByPosition = CreateSparseArray();
        precedingNoteRest = null;

        for staffNum = 1 to score.StaffCount + 1 {
            bar = score.NthStaff(staffNum).NthBar(barNumber);
            for each NoteRest noteRest in bar {
                if (noteRest.VoiceNumber != 1) {
                    return Error('Unexpected voice ' & noteRest.VoiceNumber & ' on staff ' & staffNumber, bar, -1);
                }
                noteRestsAtPosition = noteRestsByPosition[noteRest.Position];
                // Create entry if it's not already present
                switch (true) {
                    case (null = noteRestsAtPosition) {
                        noteRestsByPosition[noteRest.Position] = CreateDictionary(
                            'leftmost', noteRest,
                            'rightmost', noteRest
                        );
                    }
                    case (noteRestsAtPosition.leftmost.Dx > noteRest.Dx) {
                        noteRestsAtPosition.leftmost = noteRest;
                    }
                    case (noteRestsAtPosition.rightmost.Dx < noteRest.Dx) {
                        noteRestsAtPosition.rightmost = noteRest;
                    }
                }
            }
        }

        return noteRestsByPosition;
    }"


    /return "(SparseArray<NoteRest>|Error)  A SparseArray with anchor NoteRests
    for all the group starts and ends.  Entries at even indices are anchors for
    start brackets, those at odd indices for end brackets."
    CollectAnchorNoteRests "(score, barNumber, groupStarts) {
        noteRestsByPosition = CollectNoteRestsByPosition(score, barNumber);
        if (null != noteRestsByPosition._property:error) {
            return noteRestsByPosition;
        }

        anchors = CreateSparseArray();
        precedingNoteRest = null;

        i = 0;
        for each position in noteRestsByPosition.ValidIndices {
            noteRestsAtPosition = noteRestsByPosition[position];

            if (position > groupStarts[i]) {
                return Error('Did not find expected anchor note at the start of group', noteRestsAtPosition.leftmost.ParentBar, i);
            }

            if (position = groupStarts[i]) {
                if (null != precedingNoteRest) {
                    anchors.Push(precedingNoteRest);
                }
                anchors.Push(noteRestsAtPosition.leftmost);
                i = i + 1;
                if (i = groupStarts.Length) {
                    // We've reached the last group
                    anchors.Push(noteRestsByPosition[noteRestsByPosition.Length - 1].rightmost);
                    if (anchors.Length != (2 * groupStarts.Length)) {
                        return Error('Did not find all expected anchor notes', noteRestsAtPosition.leftmost.ParentBar, -1);
                    }
                    return anchors;
                }
            }

            precedingNoteRest = noteRestsAtPosition.rightmost;
        }

        return Error();
    }"


    /param "symbol (SymbolItem)  A bracket symbol"
    /param "dx (number)  An additional dx offset, e.g. for grace notes"
    /return "error (string)  An error message, or the empty string"
    PositionSymbol "(symbol, dx) {
        symbol.Dy = SymbolDy;
        switch (symbol.Index) {
            case (StartSymbol) {
                symbol.Dx = StartSymbolDx + dx;
            }
            case (EndSymbol) {
                symbol.Dx = EndSymbolDx + dx;
            }
            default {
                return 'No positioning information available for symbol ' & symbolIndex;
            }
        }
    }"


    /param "selection (Selection|Staff)"
    CollectBars "(selection) {
        bars = CreateSparseArray();
        for each Bar bar in selection {
            bars.Push(bar);
        }
        return bars;
    }"


    /param "bars (SparseArray<Bar>)"
    /param "groups (SparseArray<int>)  A list of group durations, measured in
    eighth notes."
    /return "(string)  An empty string on success, otherwise an error message."
    CreateBrackets "(bars, groups) {
        nextGroupStart = 0;
        groupStarts = CreateSparseArray();
        for each groupLength in groups {
            groupStarts.Push(nextGroupStart);
            nextGroupStart = nextGroupStart + (groupLength * 128);
        }
        expectedBarLength = nextGroupStart;

        Sibelius.CreateProgressDialog('Adding brackets', 0, bars.Length);
        Sibelius.ResetStopWatch(1);
        for i = 0 to bars.Length {
            bar = bars[i];
            // Update progress dialog at most 5 times per second to speed up
            // processing
            if (Sibelius.GetElapsedMilliSeconds(1) > 200) {
                message = 'Bar ' & bar.BarNumber & ' (division ' & bar.ExternalBarNumberString & ')';
                if (not Sibelius.UpdateProgressDialog(i, message)) {
                    return 'Cancelled';
                }
                Sibelius.ResetStopWatch(1);
            }

            if (bar.Length != expectedBarLength) {
                return 'Bar ' & bar.BarNumber & ' (division ' & bar.ExternalBarNumberString & ') has ' & (bar.Length / 128) & ' eighth notes, but the selected usûl pattern is ' & (expectedBarLength / 128) & ' eighths long';
            }

            existingBrackets = CollectBrackets(bar);
            if (null != existingBrackets._property:error) {
                return error;
            }

            if (existingBrackets.startPositions.Length > 0 and existingBrackets.startPositions != groupStarts) {
                return 'Bar ' & bar.BarNumber & ' has pre-existing brackets that deviate from the current usûl pattern';
            }

            // TODO: Don't touch brackets if they're already O.K.
            for each bracket in existingBrackets {
                bracket.Delete();
            }

            score = bar.ParentStaff.ParentScore;
            anchorNoteRests = CollectAnchorNoteRests(score, bar.BarNumber, groupStarts);
            if (null != anchorNoteRests._property:error) {
                return anchorNoteRests.error;
            }
            for i = 0 to anchorNoteRests.Length step 2 {
                startNoteRest = anchorNoteRests[i];
                startSymbol = bar.AddSymbol(startNoteRest.Position, StartSymbol);
                error = PositionSymbol(startSymbol, startNoteRest.Dx);
                if (null != error) {
                    return error;
                }

                endNoteRest = anchorNoteRests[i + 1];
                switch (true) {
                    case (endNoteRest.Position > startNoteRest.Position) {
                        // The end bracket can be anchored directly on the note
                        endPosition = endNoteRest.Position;
                    }
                    case ((i + 2) < anchorNoteRests.Length) {
                        // The end bracket is anchored halfway between the group
                        // start note and the next group start note
                        endPosition = anchorNoteRests[i + 2].Position;
                    }
                    default {
                        // The end bracket is anchored halfway between the groups
                        // start note and the end of the bar
                        endPosition = bar.Length;
                    }
                }
                endPosition = (endPosition + endNoteRest.Position) / 2;
                endSymbol = bar.AddSymbol(endPosition, EndSymbol);
                error = PositionSymbol(endSymbol, endNoteRest.Dx);
                if (null != error) {
                    return error;
                }
            }
        }
        Sibelius.DestroyProgressDialog();
    }"


    ParseUsulGroupLengths "(groupInput) {
        groupLengths = CreateSparseArray();
        for each value in SplitString(groupInput, ' ', true) {
            // Cast TreeNode to string
            stringValue = value & '';
            numberValue = Round(value);
            if (stringValue != numberValue) {
                return Error('Usul group lengths must be numbers separated by space characters. Please correct the input.', null, -1);
            }
            groupLengths.Push(numberValue);
        }
        if (groupLengths.Length = 0) {
            return Error('The usul groups field must have at least one number. Please correct the input.', null, -1);
        }
        return groupLengths;
    }"


    ///"Uses `SaveUsul()` to store the usûl settings that are currently edited
    in the dialog."
    /return "(boolean)  `true` on success"
    Dialog_SaveUsul "() {
        groupLengths = ParseUsulGroupLengths(DlgUsulGroups);
        if (null != groupLengths._property:error) {
            Sibelius.MessageBox(groupLengths.error & '\n\nCould not save usûl');
            return false;
        }
        error = SaveUsul(DlgUsulName, groupLengths);
        if (null != error) {
            Sibelius.MessageBox(error);
            return false;
        }
        if ('' = UsulChoice) {
            UsulChoice = DlgUsulName;
        }
        RefreshUsulChoices(DlgUsulName, false);
        Sibelius.RefreshDialog();

        return true;
    }"


    Dialog_ChooseUsul "() {
        RefreshUsulChoices(UsulChoice, false);
        Sibelius.RefreshDialog();
    }"


    Dialog_DeleteUsul "() {
        if (Sibelius.YesNoMessageBox('Delete usul ' & UsulChoice & '?')) {
            DeleteUsul(UsulChoice);
            RefreshUsulChoices('', false);
            Sibelius.RefreshDialog();
        }
    }"


    SelectionIsEmpty "(selection) {
        for each object in selection {
            return false;
        }
        return true;
    }"


    Dialog "Dialog"
    {
        Title "CMO Create brackets"
        X "144"
        Y "261"
        Width "200"
        Height "100"
        Controls
        {
            Text
            {
                Title "Usuls"
                X "5"
                Y "5"
                Width "60"
                Height "14"
            }
            Text
            {
                Title "Usul name"
                X "5"
                Y "21"
                Width "60"
                Height "14"
            }
            Text
            {
                Title "Groups lengths in 𝆕"
                X "6"
                Y "37"
                Width "60"
                Height "14"
            }
            ComboBox
            {
                X "65"
                Y "4"
                Width "60"
                Height "13"
                ListVar "UsulChoices"
                ID "IDC_USULCHOICES_COMBO"
                Value "UsulChoice"
                Method "Dialog_ChooseUsul"
                SetFocus "1"
            }
            Edit
            {
                X "65"
                Y "20"
                Width "60"
                Height "14"
                ID "IDC_DLGUSULNAME_EDIT"
                Value "DlgUsulName"
            }
            Edit
            {
                X "65"
                Y "36"
                Width "60"
                Height "14"
                ID "IDC_DLGUSULGROUPS_EDIT"
                Value "DlgUsulGroups"
            }
            Button
            {
                Title "Help"
                X "5"
                Y "52"
                Width "50"
                Height "14"
                Method "ShowHelp"
            }
            Button
            {
                Title "Close Dialog"
                X "58"
                Y "52"
                Width "50"
                Height "14"
                EndDialog "0"
            }
            Button
            {
                Title "Create brackets"
                X "140"
                Y "52"
                Width "50"
                Height "14"
                DefaultButton "1"
                Method "Dialog_CreateBrackets"
            }
            Button
            {
                Title "Delete Usûl"
                X "140"
                Y "4"
                Width "50"
                Height "14"
                Method "Dialog_DeleteUsul"
            }
            Button
            {
                Title "Save usûl"
                X "140"
                Y "28"
                Width "50"
                Height "14"
                Method "Dialog_SaveUsul"
            }
        }
    }
}
